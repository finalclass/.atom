{"name":"nschedule","description":"Task scheduler with concurrency limits.","author":{"name":"Thomas Bratt"},"license":"MIT","version":"0.3.0","private":false,"main":"./lib/nschedule.js","dependencies":{"priorityqueuejs":"0.1.0"},"repository":{"type":"git","url":"git+https://github.com/thomasbratt/NSchedule.git"},"keywords":["concurrency","poller","queue","scheduler","task","timer","worker"],"readme":"NSchedule\n=========\n\nAn efficient periodic task scheduler with concurrency limits.\n\nFeatures\n--------\n\n* Limits the nunmber of concurrently executing tasks. This avoids overloading\n  the resource used by the task (a server or network link, for example).\n* Efficiently schedules tasks that must be repeated periodically.\n* Individual tasks are rescheduled _after_ they have run. This prevents multiple\n  invocations of the same task from overlapping.\n* Allows any combination of: immediate/delayed and periodic/one-shot.\n\nRelated Packages\n----------------\n\nSome other packages you might want to consider.\n* [agenda]((https://npmjs.org/package/agenda)\n  Database-backed cron-like scheduler.\n* [flagpoll](https://npmjs.org/package/flagpoll)\n  Supports a finite number of task executions (will not reschedule a task\n  indefinitely).\n* [node-schedule](https://npmjs.org/package/node-schedule)\n  Cron-like scheduling. From the readme: 'node-schedule is for time-based\n  scheduling, not interval-based scheduling.'\n* [poll](https://npmjs.org/package/poll)\n  Work in progress.\n* [pomelo-schedule](https://npmjs.org/package/pomelo-schedule)\n  Allows cron syntax. No concurrency limits. For example, schedule 100 tasks\n  with different intervals in the same section of code and all 100 will trigger\n  immediately.\n* [simple-schedule](https://npmjs.org/package/simple-schedule)\n  All tasks must have the same interval and do not recur.\n\nInstallation\n------------\n\n> npm install nschedule\n\nCommon Usage\n------------\n\n````JavaScript\n\n    #! /usr/bin/env node\n\n    // ---------------------------------------------------------------------------\n    // Demonstrates some common scheduling frequency and recurrence patterns.\n    // ---------------------------------------------------------------------------\n\n    var Scheduler = require('nschedule');\n\n    // Create a scheduler that will not execute more than 2 tasks\n    // at a time.\n    var scheduler = new Scheduler(2);\n\n    // This task recurs every 3 seconds.\n    scheduler.add(3000, function(done){\n        console.log(\"Task at period  3s. \" + (new Date).toISOString());\n        done();\n    });\n\n    // This task recurs every 5 seconds.\n    scheduler.add(5000, function(done){\n        console.log(\"Task at period  5s. \" + (new Date).toISOString());\n        done();\n    });\n\n    // This task executes once after 15 seconds.\n    scheduler.add(15000, function(done){\n        console.log(\"Task at period 15s. \" + (new Date).toISOString());\n        done(scheduler.STOP);\n    });\n\n    // This task executes immediately and does not recur.\n    // The interval is effectively ignored.\n    scheduler.add(1000, function(done){\n            console.log(\"One shot task.      \" + (new Date).toISOString());\n\n            // Stop after first and only execution.\n            done(scheduler.STOP);\n        },\n        scheduler.IMMEDIATE);\n\n````\n\nConcurrency Limiting Example\n----------------------------\n\n````JavaScript\n\n    #! /usr/bin/env node\n\n    // ---------------------------------------------------------------------------\n    // Demonstrates the limit on concurrently executing tasks.\n    // ---------------------------------------------------------------------------\n\n    var Scheduler = require('nschedule');\n\n    var TICK_IN_MS = 100;\n\n    // Create a scheduler that will not execute more than 1 task\n    // at a time.\n    var scheduler = new Scheduler(1);\n\n    // This task recurs every second but will be blocked for executing by the long\n    // running task schedule every 5s.\n    scheduler.add(1000, function(done){\n        logWithTimestamp('Task at 1s  *');\n        done();\n    });\n\n    // This task is scheduled to recur every 5s but also takes 5s to execute, so it\n    // will actually execute every 10s.\n    //\n    // As the scheduler was created with a concurrency setting of 1, when this task\n    // executes it will block the task that runs every 1s while it is executing.\n    // To prevent this behavior, create the scheduler with a higher concurrency\n    // setting.\n    scheduler.add(5000, function(done){\n        logWithTimestamp('Task at 10s  ********** (start)');\n        busy('Task at 10s  ********** (end)', 5000, done);\n    });\n\n    // Simulate some operation that takes time to complete (backing up a database or\n    // network communications, for exanple).\n    function busy(name, interval, done){\n        if(interval <= 0){\n            logWithTimestamp(name);\n            done();\n            return;\n        }\n\n        setTimeout(function(){\n            busy(name, interval - TICK_IN_MS, done);\n        }, TICK_IN_MS);\n    }\n\n    function logWithTimestamp(name){\n        console.log((new Date).toISOString() + \" \" + name);   \n    }\n\n````\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/thomasbratt/nschedule/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/thomasbratt/NSchedule/issues"},"homepage":"https://github.com/thomasbratt/NSchedule","_id":"nschedule@0.3.0","dist":{"shasum":"9ac467d64b19c2150d8a3fc1f9e9581a08435bbf","tarball":"http://registry.npmjs.org/nschedule/-/nschedule-0.3.0.tgz"},"_from":"nschedule@0.3.0","_npmVersion":"1.3.21","_npmUser":{"name":"thomasbratt","email":"thomas.bratt@gmail.com"},"maintainers":[{"name":"thomasbratt","email":"thomas.bratt@gmail.com"}],"directories":{},"_shasum":"9ac467d64b19c2150d8a3fc1f9e9581a08435bbf","_resolved":"https://registry.npmjs.org/nschedule/-/nschedule-0.3.0.tgz"}