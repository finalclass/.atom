// Generated by CoffeeScript 1.9.3
(function() {
  var $, InputDialog, TextEditorView, View, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('atom-space-pen-views'), $ = ref.$, TextEditorView = ref.TextEditorView, View = ref.View;

  module.exports = InputDialog = (function(superClass) {
    extend(InputDialog, superClass);

    function InputDialog() {
      this.close = bind(this.close, this);
      this.confirm = bind(this.confirm, this);
      return InputDialog.__super__.constructor.apply(this, arguments);
    }

    InputDialog.content = function(arg) {
      var prompt;
      prompt = (arg != null ? arg : {}).prompt;
      return this.div((function(_this) {
        return function() {
          if (prompt) {
            _this.label(prompt, {
              "class": 'icon',
              outlet: 'promptText'
            });
          }
          _this.subview('miniEditor', new TextEditorView({
            mini: true
          }));
          return _this.div({
            "class": 'error-message',
            outlet: 'errorMessage'
          });
        };
      })(this));
    };

    InputDialog.prototype.initialize = function(options) {
      var defaultText, detached, elementClass, iconClass, match, ref1, selectedRange, validate;
      if (options == null) {
        options = {};
      }
      this.callback = options.callback, elementClass = options.elementClass, iconClass = options.iconClass, defaultText = options.defaultText, selectedRange = options.selectedRange, detached = options.detached, validate = options.validate, match = options.match;
      if (elementClass) {
        this.element.classList.add(elementClass);
      }
      if (iconClass) {
        if ((ref1 = this.promptText) != null) {
          ref1.addClass(iconClass);
        }
      }
      if (validate) {
        this.validate = validate;
      }
      this.miniEditor.on('blur', this.close);
      this.miniEditor.getModel().onDidChange((function(_this) {
        return function() {
          return _this.showError(_this.validate(_this.miniEditor.getModel().getText()));
        };
      })(this));
      if (defaultText) {
        this.miniEditor.getModel().setText(defaultText);
        if (selectedRange) {
          this.miniEditor.getModel().setSelectedBufferRange(selectedRange);
        }
      }
      if (match) {
        this.miniEditor.getModel().onWillInsertText(function(arg) {
          var cancel, text;
          cancel = arg.cancel, text = arg.text;
          if (!text.match(match)) {
            return cancel();
          }
        });
      }
      if (detached) {
        this.detached = detached;
      }
      return atom.commands.add(this.element, {
        'core:confirm': this.confirm,
        'core:cancel': this.close
      });
    };

    InputDialog.prototype.storeFocusedElement = function() {
      return this.previouslyFocusedElement = $(':focus');
    };

    InputDialog.prototype.restoreFocus = function() {
      var ref1;
      if ((ref1 = this.previouslyFocusedElement) != null ? ref1.isOnDom() : void 0) {
        return this.previouslyFocusedElement.focus();
      } else {
        return atom.views.getView(atom.workspace).focus();
      }
    };

    InputDialog.prototype.confirm = function() {
      var error, text;
      text = this.miniEditor.getText();
      error = this.validate(text);
      if (error) {
        return this.showError(error);
      }
      if (typeof this.callback === "function") {
        this.callback(text);
      }
      return this.close();
    };

    InputDialog.prototype.validate = function(text) {
      if (text.trim().length === 0) {
        return 'required';
      }
      return null;
    };

    InputDialog.prototype.close = function() {
      var miniEditorFocused, panelToDestroy;
      miniEditorFocused = this.miniEditor.hasFocus();
      panelToDestroy = this.panel;
      this.panel = null;
      if (panelToDestroy != null) {
        panelToDestroy.destroy();
      }
      if (miniEditorFocused) {
        return this.restoreFocus();
      }
    };

    InputDialog.prototype.attach = function() {
      this.storeFocusedElement();
      this.panel = atom.workspace.addModalPanel({
        item: this.element
      });
      this.miniEditor.focus();
      return this.miniEditor.getModel().scrollToCursorPosition();
    };

    InputDialog.prototype.showError = function(message) {
      if (message == null) {
        message = '';
      }
      this.errorMessage.text(message);
      if (message) {
        return this.flashError();
      }
    };

    return InputDialog;

  })(View);

}).call(this);
